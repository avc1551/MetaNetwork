marHeatmap = c(3,4,2,2),
xLabelsAngle = 90,
plotAdjacency = TRUE,
plotDendrograms = FALSE)
MEOutput@AdjacencyHeatmap  <- recordPlot()
WGCNA::plotEigengeneNetworks(MET,
"Eigenprotein Correlation Heatmap",
marHeatmap = c(3,4,2,2),
plotDendrograms = FALSE,
plotAdjacency = FALSE,
xLabelsAngle = 90,
heatmapColors = WGCNA::blueWhiteRed(50))
MEOutput@CorrHeatmap <- recordPlot()
MEOutput
})
## ModuleEigenprotein Plotting methods ####
## Facet Wrapped
## Boxplot
setMethod("BoxPlot_ModuleFacetWrapped_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "PairedComparisons"),
definition = function(METidy, comparisons){
x <- tibble::tibble(METidy@ModuleEigenproteins)
comps <- comparisons@Comparisons
ggplot(data = x,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_boxplot() +
facet_wrap(~ `Module`) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggpubr::stat_compare_means(method = "t.test",
label = "p.signif",
comparisons = comps)
})
setMethod("BoxPlot_ModuleFacetWrapped_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "missingOrNULL"),
definition = function(METidy, comparisons){
x <- tibble::tibble(METidy@ModuleEigenproteins)
ggplot(data = x,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_boxplot() +
facet_wrap(~ `Module`) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
})
## Violin Plot
setMethod("ViolinPlot_ModuleFacetWrapped_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "PairedComparisons"),
definition = function(METidy, comparisons){
x <- tibble::tibble(METidy@ModuleEigenproteins)
comps <- comparisons@Comparisons
ggplot(data = x,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~ `Module`) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggpubr::stat_compare_means(method = "t.test",
label = "p.signif",
comparisons = comps)
})
setMethod("ViolinPlot_ModuleFacetWrapped_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "missingOrNULL"),
definition = function(METidy, comparisons){
x <- tibble::tibble(METidy@ModuleEigenproteins)
ggplot(data = x,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~ `Module`) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
})
## Density Plot
setMethod("DensityPlot_ModuleFacetWrapped_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy"),
definition = function(METidy){
x <- tibble::tibble(METidy@ModuleEigenproteins)
ME_means_by_group <- x %>%
group_by(`ExperimentalGroup`, `Module`)%>%
dplyr::summarise("mean" = mean(`Eigenprotein`))
ggplot(data = x,
mapping = aes(x = `Eigenprotein`,
col = `ExperimentalGroup`,
fill = `ExperimentalGroup`)) +
geom_density(alpha = 0.4) +
geom_vline(data = ME_means_by_group,
aes(xintercept = `mean`,
col = `ExperimentalGroup`)) +
facet_wrap(~ `Module`, scales = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
})
## Individual Plots BoxPlot
setMethod("BoxPlot_IndividualModule_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "PairedComparisons"),
definition = function(METidy,
comparisons){
ME_data <- tibble::tibble(METidy@ModuleEigenproteins)
comps <- comparisons@Comparisons
ggplot_output_list <- list()
unique_modules <- unique(ME_data$Module)
for(i in 1:length(unique_modules)){
temp_data <- ME_data %>%
filter(`Module` == unique_modules[i])
ggplot_output_list[[i]] <- ggplot(data = temp_data,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_boxplot() +
ggtitle(paste(unique_modules[i])) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggpubr::stat_compare_means(method = "t.test",
label = "p.signif",
comparisons = comps)
}
ggplot_output_list
})
setMethod("BoxPlot_IndividualModule_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "missingOrNULL"),
definition = function(METidy,
comparisons){
ME_data <- tibble::tibble(METidy@ModuleEigenproteins)
ggplot_output_list <- list()
unique_modules <- unique(ME_data$Module)
for(i in 1:length(unique_modules)){
temp_data <- ME_data %>%
filter(`Module` == unique_modules[i])
ggplot_output_list[[i]] <- ggplot(data = temp_data,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_boxplot() +
ggtitle(paste(unique_modules[i])) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
}
ggplot_output_list
})
## Individual Plots Violin Plot
setMethod("ViolinPlot_IndividualModule_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "PairedComparisons"),
definition = function(METidy,
comparisons){
ME_data <- tibble::tibble(METidy@ModuleEigenproteins)
comps <- comparisons@Comparisons
ggplot_output_list <- list()
unique_modules <- unique(ME_data$Module)
for(i in 1:length(unique_modules)){
temp_data <- ME_data %>%
filter(`Module` == unique_modules[i])
ggplot_output_list[[i]] <- ggplot(data = temp_data,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_violin(draw_quantiles = 0.5) +
ggtitle(paste(unique_modules[i])) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggpubr::stat_compare_means(method = "t.test",
label = "p.signif",
comparisons = comps)
}
ggplot_output_list
})
setMethod("ViolinPlot_IndividualModule_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "missingOrNULL"),
definition = function(METidy,
comparisons){
ME_data <- tibble::tibble(METidy@ModuleEigenproteins)
ggplot_output_list <- list()
unique_modules <- unique(ME_data$Module)
for(i in 1:length(unique_modules)){
temp_data <- ME_data %>%
filter(`Module` == unique_modules[i])
ggplot_output_list[[i]] <- ggplot(data = temp_data,
mapping = aes(x = `ExperimentalGroup`,
y = `Eigenprotein`)) +
geom_violin(draw_quantiles = 0.5) +
ggtitle(paste(unique_modules[i])) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
}
ggplot_output_list
})
## Density Plot
setMethod("DensityPlot_IndividualModule_by_Experiment",
signature(METidy = "ModuleEigenproteinsTidy",
comparisons = "missingOrNULL"),
definition = function(METidy,
comparisons){
ME_data <- tibble::tibble(METidy@ModuleEigenproteins)
ggplot_output_list <- list()
unique_modules <- unique(ME_data$Module)
for(i in 1:length(unique_modules)){
temp_data <- ME_data %>%
filter(`Module` == unique_modules[i])
ggplot_output_list[[i]] <- ggplot(data = temp_data,
mapping = aes(x = `Eigenprotein`,
col = `ExperimentalGroup`,
fill = `ExperimentalGroup`)) +
geom_density(alpha = 0.4) +
ggtitle(paste(unique_modules[i])) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
}
ggplot_output_list
})
## plotTOM ####
setMethod("plotTOM", signature(CleanData = "CleanData",
WGCNAResults = "WGCNAResults",
WGCNAParameters = "WGCNAParameters"),
function(CleanData, WGCNAResults, WGCNAParameters){
tomplot_output <- new("TOMPlot")
sim_TOM <- WGCNA::TOMsimilarityFromExpr(CleanData@Data[,-1],
networkType = WGCNAParameters@networkType,
power = WGCNAParameters@power,
TOMType = WGCNAParameters@networkType,
replaceMissingAdjacencies =
WGCNAParameters@replaceMissingAdjacencies)
dissim_TOM <- 1 - sim_TOM
WGCNA::TOMplot(
dissim = dissim_TOM^6,
dendro = WGCNAResults@dendrogram@hclust,
ColorsLeft = WGCNAResults@colors[WGCNAResults@goodGenes == TRUE]
)
tomplot_output@Plot <- recordPlot()
tomplot_output
})
## CreatePlotOutput ####
setMethod("CreatePlotsOutput", signature(PathToOutput = "characterOrNULL",
gProfilerPlots = "GostPlotCollection",
SampleClustering = "SampleClustering",
ProteinDendrogram = "ProteinDendrogram",
EigenproteinDiagnostics =
"ModuleEigenproteinDiagnostics",
ModuleEigenproteinPlots =
"ModuleEigenproteinPlots",
TOMPlot = "TOMPlot",
SFTPlot = "ScaleFreeTopology",
EigenproteinHeatmap = "EigenproteinHeatmap"),
definition = function(PathToOutput,
gProfilerPlots,
SampleClustering,
ProteinDendrogram,
EigenproteinDiagnostics,
ModuleEigenproteinPlots,
TOMPlot,
SFTPlot,
EigenproteinHeatmap){
PlotsOutput <- new("PlotsOutput")
PlotsOutput@PathToOutput <- ifelse(is.null(PathToOutput),
"", PathToOutput)
PlotsOutput@gProfilerPlots <- gProfilerPlots
PlotsOutput@SampleClustering <- SampleClustering
PlotsOutput@ProteinDendrogram <- ProteinDendrogram
PlotsOutput@EigenproteinDiagnostics <- EigenproteinDiagnostics
PlotsOutput@ModuleEigenproteinPlots <- ModuleEigenproteinPlots
PlotsOutput@TOMPlot <- TOMPlot
PlotsOutput@SFTPlot <- SFTPlot
PlotsOutput@EigenproteinHeatmap <- EigenproteinHeatmap
PlotsOutput
})
## CreateServerOutput ####
setMethod("CreateServerOutput", signature(PlotsOutput = "PlotsOutput",
DataOutput = "DataOutput"),
function(PlotsOutput, DataOutput){
serveroutput <- new("ServerOutput")
serveroutput@Plots <- PlotsOutput
serveroutput@Data <- DataOutput
serveroutput
})
setMethod("CreateServerOutput", signature(PlotsOutput = "PlotsOutput",
DataOutput = "missing"),
function(PlotsOutput, DataOutput){
serveroutput <- new("ServerOutput")
serveroutput@Plots <- PlotsOutput
serveroutput
})
### Accessors for: get_specific_diagnostic_plot ####
# Accessors specific for each type of plot:
# Protein Dendrogram
setMethod("fetch_Protein_Dendrogram",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@ProteinDendrogram@Plot
})
# Module Correlation Dendrogram
setMethod("fetch_correlation_dendrogram",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@EigenproteinDiagnostics@CorrDendrogram
})
# Module Adjacency Heatmap
setMethod("fetch_adjacency_heatmap",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@EigenproteinDiagnostics@AdjacencyHeatmap
})
# Module Correlation Heatmap
setMethod("fetch_correlation_heatmap",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@EigenproteinDiagnostics@CorrHeatmap
})
# Module Eigenprotein Heatmap
setMethod("fetch_Eigenprotein_heatmap",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@EigenproteinHeatmap@Plot
})
# ScaleFreeTopology Plots
setMethod("fetch_SFT_plot",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@SFTPlot@Plot
})
# TOM Plot
setMethod("fetch_TOM_plot",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@TOMPlot@Plot
})
# Sample Clustering
setMethod("fetch_SampleClustering_dendro",
signature(parent = "ServerOutput"),
function(parent){
parent@Plots@SampleClustering@Plot
})
### get_specific_diagnostic_plot ####
setMethod("get_specific_diagnostic_plot",
signature(parent = "ServerOutput",
plot = "character"),
definition = function(parent, plot){
switch(plot,
"Protein Dendrogram" = {fetch_Protein_Dendrogram(parent)},
"Module Correlation Dendrogram" = {fetch_correlation_dendrogram(parent)},
"Module Adjacency Heatmap" = {fetch_adjacency_heatmap(parent)},
"Module Correlation Heatmap" = {fetch_correlation_heatmap(parent)},
"Module Eigenprotein Heatmap" = {fetch_Eigenprotein_heatmap(parent)},
"Scale Free Topology Plots" = {fetch_SFT_plot(parent)},
"TOM Plot" = {fetch_TOM_plot(parent)},
"Sample Clustering" = fetch_SampleClustering_dendro(parent))
})
### Methods to display data ####
setGeneric("prop_var_output", function(ServerOutput) standardGeneric("prop_var_output"))
setMethod("prop_var_output", "ServerOutput", function(ServerOutput){
prop_var <- ServerOutput@Data@VarianceExplained
})
### Accessor methods to create DataOutput object ####
setMethod("BuildDataOutput", signature(METidy = "ModuleEigenproteinsTidy",
WGCNAResults = "WGCNAResults",
gProfiler = "gProfilerResults",
CleanData = "CleanData",
MM_object = "ModuleMembership"),
function(METidy,
WGCNAResults,
gProfiler,
CleanData,
MM_object){
MEs_wide <- fetch_MEs_wide(WGCNAResults)
MEs_tidy <- fetch_MEs_tidy(METidy)
gProfiler_results <- fetch_gProfiler_results(gProfiler)
Data_Output <- new("DataOutput")
Data_Output@VarianceExplained  <- calc_prop_var(WGCNAResults = WGCNAResults,
CleanData = CleanData) %>%
data.frame() %>%
tibble::rownames_to_column(var = "Percent Variation") %>%
tibble::tibble()
Data_Output@ModuleEigenproteinsTidy <- MEs_tidy
Data_Output@ModuleEigenproteinsWide <- MEs_wide
Data_Output@gProfilerResults <- gProfiler_results
Data_Output@ModuleMembership <- fetch_Module_Membership(MM_object = MM_object)
Data_Output
})
setMethod("fetch_MEs_wide",
"WGCNAResults",
function(WGCNAResults){
mes_temp <- tibble(WGCNAResults@MEs)
samples <- WGCNAResults@Samples
mes_output <- add_column(mes_temp, "Samples" = samples, .before = 1)
mes_output
})
setMethod("fetch_MEs_wide",
"ServerOutput",
function(WGCNAResults){
WGCNAResults@Data@ModuleEigenproteinsWide
})
setMethod("fetch_MEs_tidy", signature("ModuleEigenproteinsTidy"),
definition = function(METidy){
mes_output <- tibble(METidy@ModuleEigenproteins)
})
setMethod("fetch_gProfiler_results", signature(gProfilerResults = "gProfilerResults"),
definition = function(gProfilerResults){
gProfilerResults@EnrichmentResults
})
setMethod("fetch_gProfiler_results", signature(gProfilerResults = "ServerOutput"),
definition = function(gProfilerResults){
gProfilerResults@Data@gProfilerResults
})
setMethod("fetch_gProfiler_parameters", signature(gProfilerResults = "gProfilerResults"),
function(gProfilerResults){
gProfilerResults@Parameters
})
setMethod("fetch_Module_Membership", signature("ModuleMembership"),
definition = function(MM_object){
MM_object@Modules
})
setMethod("fetch_Module_Membership", signature("ServerOutput"),
definition = function(MM_object){
MM_object@Data@ModuleMembership
})
setMethod("calc_prop_var", "WGCNAResults",
definition = function(WGCNAResults, CleanData){
WGCNA::propVarExplained(datExpr = CleanData@Data[,-1],
colors = WGCNAResults@colors,
MEs = WGCNAResults@MEs)
})
setMethod("fetch_specific_gProfiler_result",
signature(parent = "ServerOutput",
plot_name = "character"),
definition = function(parent, plot_name){
fetch_gProfiler_results(parent)[[plot_name]]$result
})
setGeneric("fetch_specific_ModMemb_result", function(parent, plot_name)
standardGeneric("fetch_specific_ModMemb_result"))
setMethod("fetch_specific_ModMemb_result",
signature(parent = "ServerOutput",
plot_name = "character"),
definition = function(parent, plot_name){
fetch_Module_Membership(parent)[[plot_name]]
})
### PlotProteinDendrogram
setMethod("PlotProteinDendrogram", signature(Results = "WGCNAResults"),
definition = function(Results){
ProteinDendrogram <- new("ProteinDendrogram")
WGCNA::plotDendroAndColors(dendro = Results@dendrogram@hclust,
colors = data.frame(Results@unmergedColors[Results@goodGenes == TRUE],
Results@colors[Results@goodGenes == TRUE]),
groupLabels = c("Unmerged Modules",
"Merged Modules"),
dendroLabels = FALSE)
ProteinDendrogram@Plot <- recordPlot()
ProteinDendrogram
})
setMethod("plotEigenproteinNetwork",
signature(Results = "WGCNAResults"),
definition = function(Results){
EigenproteinNetwork <- new("EigenproteinNetwork")
EigenproteinNetwork@Plot <- recordPlot(
WGCNA::plotEigengeneNetworks(Results@MEs,
"Eigenprotein Network",
marHeatmap = c(3,4,2,2),
marDendro = c(3,4,2,5),
plotDendrograms = TRUE,
xLabelsAngle = 90,
heatmapColors = WGCNA::blueWhiteRed(50))
)
EigenproteinNetwork
})
## PlotEigenproteinHeatmap ####
setMethod("PlotEigenproteinHeatmap", signature(WGCNAResults = "WGCNAResults"),
definition = function(WGCNAResults){
EP_Heatmap <- new("EigenproteinHeatmap")
MEs_matrix <- as.matrix(WGCNAResults@MEs)
## Define dist and hclust functions for use by pheatmap
distFunction <- function(x) as.dist(1 - abs(cor(x,
method = "pearson")))
hclustFunction <- function(x) hclust(x, method = "average")
## Generate the dendrograms
hclust.col <- hclustFunction(distFunction(WGCNAResults@MEs))
hclust.row <- hclustFunction(distFunction(t(WGCNAResults@MEs)))
hclust.row$labels <- WGCNAResults@Samples
## Create row annotations dataframe
rownames(MEs_matrix) <- WGCNAResults@Samples
rownames(MEs_matrix) <- rownames(MEs_matrix)
## Need the above trick because using rownames() <- doesn't set the
## rownames attribute within object matrix that pheatmap uses.
## Which is dumb, but whatever I guess.
## Only took me an hour to figure that out
## Row annotations
ann_row <- data.frame(Condition = WGCNAResults@ExperimentalGroups)
rownames(ann_row) <- WGCNAResults@Samples
## Col annotations
## Current col names are ME + color. Use substring to pull only the
##  color name
ann_col <- substr(hclust.col$labels, 3, nchar(hclust.col$labels))
col_df <- data.frame(module = ann_col)
rownames(col_df) <- hclust.col$labels
## Create color scheme
scale_colors <- RColorBrewer::brewer.pal(11, "PRGn")
EP_Heatmap@Plot <- pheatmap::pheatmap(MEs_matrix,
cluster_cols = hclust.col,
cluster_rows = hclust.row,
annotation_row = ann_row,
scale = "column",
color = scale_colors,
show_rownames = TRUE)
EP_Heatmap
})
runApp()
dev.off()
runApp()
?WGCNA::TOMplot
